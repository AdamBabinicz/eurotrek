import { useParams } from "wouter";
import { useTranslation } from "react-i18next";
import { destinations } from "@/data/destinations";
import PhotoGrid from "@/components/PhotoGrid";
import { photos } from "@/data/photos";

const DestinationPage = () => {
  const { id } = useParams();
  const { t } = useTranslation();

  const destination = destinations.find((d) => d.id === id);

  if (!destination) {
    return (
      <div className="container mx-auto px-4 py-8">Podróży nie znaleziono</div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h2 className="text-3xl font-bold mb-6">
        {t(`destinations.${destination.id}`)}
      </h2>
      <PhotoGrid photos={photos} city={destination.id} />
    </div>
  );
};

export default DestinationPage;


------------------------

import { useState, useEffect } from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { Button } from "@/components/ui/button";
import { motion, AnimatePresence } from "framer-motion";
import { useTranslation } from "react-i18next";

interface SlideImage {
  id: string;
  src: string;
  alt: string;
  location: string;
  description: string;
}

interface ImageSliderProps {
  images: SlideImage[];
  autoPlayInterval?: number;
}

const ImageSlider = ({ images, autoPlayInterval = 5000 }: ImageSliderProps) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const { t } = useTranslation();

  useEffect(() => {
    if (autoPlayInterval <= 0 || images.length <= 1) return;

    const interval = setInterval(() => {
      setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);
    }, autoPlayInterval);

    return () => clearInterval(interval);
  }, [autoPlayInterval, images.length]);

  const handleNext = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);
  };

  const handlePrevious = () => {
    setCurrentIndex((prevIndex) => (prevIndex - 1 + images.length) % images.length);
  };

  const handleDotClick = (index: number) => {
    setCurrentIndex(index);
  };

  return (
    <div className="image-slider h-full relative">
      <div className="slider-container h-full relative overflow-hidden">
        <AnimatePresence initial={false}>
          <motion.div
            key={currentIndex}
            className="absolute inset-0"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.7 }}
          >
            <img 
              src={images[currentIndex].src} 
              alt={images[currentIndex].alt} 
              className="w-full h-full object-cover"
            />
            <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
            <div className="absolute bottom-0 left-0 right-0 p-6 md:p-12 text-white">
              <h2 className="font-accent italic text-xl md:text-3xl mb-2">{t(`heroSlides.${images[currentIndex].id}.location`)}</h2>
              <p className="text-sm md:text-base max-w-md">{t(`heroSlides.${images[currentIndex].id}.description`)}</p>
            </div>
          </motion.div>
        </AnimatePresence>
      </div>
      
      <Button 
        variant="ghost" 
        size="icon" 
        className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/70 dark:bg-black/50 rounded-full text-black dark:text-white hover:bg-white hover:dark:bg-black transition-colors z-10 focus:outline-none focus:ring-2 focus:ring-primary" 
        onClick={handlePrevious}
        aria-label={t('slider.previous')}
      >
        <ChevronLeft className="h-5 w-5" />
      </Button>
      
      <Button 
        variant="ghost" 
        size="icon" 
        className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/70 dark:bg-black/50 rounded-full text-black dark:text-white hover:bg-white hover:dark:bg-black transition-colors z-10 focus:outline-none focus:ring-2 focus:ring-primary" 
        onClick={handleNext}
        aria-label={t('slider.next')}
      >
        <ChevronRight className="h-5 w-5" />
      </Button>
      
      <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2 z-10">
        {images.map((_, index) => (
          <Button 
            key={index} 
            variant="ghost" 
            size="icon" 
            className={`w-3 h-3 p-0 rounded-full ${index === currentIndex ? 'bg-white' : 'bg-white/50 hover:bg-white'} transition-colors focus:outline-none focus:ring-2 focus:ring-primary`} 
            onClick={() => handleDotClick(index)}
            aria-label={t('slider.goToSlide', { index: index + 1 })}
          />
        ))}
      </div>
    </div>
  );
};

export default ImageSlider;


----------------------------------

useEffect(() => {
    console.log("Lightbox is open:", isOpen);
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!isOpen) return;

      switch (e.key) {
        case "Escape":
          console.log("Escape key pressed");
          onClose();
          break;
        case "ArrowRight":
          console.log("ArrowRight key pressed");
          onNext();
          break;
        case "ArrowLeft":
          console.log("ArrowLeft key pressed");
          onPrevious();
          break;
        default:
          break;
      }
    };

    document.addEventListener("keydown", handleKeyDown);

    if (isOpen) {
      console.log("Blocking body scroll");
      document.body.style.overflow = "hidden";
    } else {
      console.log("Releasing body scroll");
      document.body.style.overflow = "";
    }

    return () => {
      document.removeEventListener("keydown", handleKeyDown);
      document.body.style.overflow = "";
    };
  }, [isOpen, onClose, onNext, onPrevious]);


--------------------------------

import { useParams } from "wouter";
import { useTranslation } from "react-i18next";
import { useState } from "react";
import type { Photo } from "@/components/PhotoGrid";
import { destinations } from "@/data/destinations";
import { photos } from "@/data/photos";
import ImageSlider from "@/components/ImageSlider";
import PhotoLightbox from "@/components/PhotoLightbox";

const DestinationPage = () => {
  const { id } = useParams();
  const { t } = useTranslation();
  const [hoveredPhoto, setHoveredPhoto] = useState<Photo | null>(null);
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);

  const destination = destinations.find((d) => d.id === id);
  const destinationPhotos = photos.filter((photo) => photo.city === id);

  if (!destination) {
    return (
      <div className="container mx-auto px-4 py-8">Podróży nie znaleziono</div>
    );
  }

  const sliderImages = destinationPhotos.map((photo) => ({
    id: photo.id,
    src: photo.src,
    alt: photo.alt || "",
    location: photo.location || "",
    description: photo.title || "",
  }));
  console.log("Slider images:", sliderImages);

  return (
    <div className="container mx-auto px-4 py-8">
      <h2 className="text-3xl font-bold mb-6">
        {t(`destinations.${destination.id}`)}
      </h2>

      {/* Image Slider */}
      <div className="h-[80vh] mb-8 rounded-lg overflow-hidden">
        <ImageSlider
          images={sliderImages}
          onImageClick={(index) => {
            console.log("Opening lightbox with photo index:", index);
            setCurrentPhotoIndex(index);
            console.log("Setting lightboxOpen to true");
            setLightboxOpen(true);
          }}
        />
      </div>
      {lightboxOpen && (
        <PhotoLightbox
          isOpen={lightboxOpen}
          photos={destinationPhotos}
          currentIndex={currentPhotoIndex}
          onClose={() => {
            console.log("Zamykam lightbox");
            setLightboxOpen(false);
          }}
          onNext={() =>
            setCurrentPhotoIndex(
              (prevIndex) => (prevIndex + 1) % destinationPhotos.length
            )
          }
          onPrevious={() =>
            setCurrentPhotoIndex(
              (prevIndex) =>
                (prevIndex - 1 + destinationPhotos.length) %
                destinationPhotos.length
            )
          }
        />
      )}
    </div>
  );
};

export default DestinationPage;

--------------------------------

import { useState, useEffect } from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { Button } from "@/components/ui/button";
import { motion, AnimatePresence } from "framer-motion";
import { useTranslation } from "react-i18next";

interface SlideImage {
  id: string;
  src: string;
  alt: string;
  location: string;
  description: string;
}

interface ImageSliderProps {
  images: SlideImage[];
  autoPlayInterval?: number;
  onImageClick?: (index: number) => void;
}

const ImageSlider = ({
  images,
  autoPlayInterval = 6000,
  onImageClick,
}: ImageSliderProps) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const { t } = useTranslation();

  useEffect(() => {
    if (autoPlayInterval <= 0 || images.length <= 1) return;

    const interval = setInterval(() => {
      setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);
    }, autoPlayInterval);

    return () => clearInterval(interval);
  }, [autoPlayInterval, images.length]);

  const handleNext = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);
  };

  const handlePrevious = () => {
    setCurrentIndex(
      (prevIndex) => (prevIndex - 1 + images.length) % images.length
    );
  };

  const handleDotClick = (index: number) => {
    setCurrentIndex(index);
  };

  return (
    <div className="image-slider h-full relative">
      <div className="slider-container h-full relative overflow-hidden">
        <AnimatePresence initial={false}>
          <motion.div
            key={currentIndex}
            className="absolute inset-0"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.7 }}
          >
            <img
              src={images[currentIndex].src}
              alt={images[currentIndex].alt}
              className="w-full h-full object-cover cursor-pointer"
              onClick={() => onImageClick?.(currentIndex)}
            />
            <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
            <div className="absolute bottom-0 left-0 right-0 p-6 md:p-12 text-white">
              <h2 className="font-accent italic text-xl md:text-3xl mb-2">
                {t(`heroSlides.${images[currentIndex].id}.location`)}
              </h2>
              <p className="text-sm md:text-base max-w-md">
                {t(`heroSlides.${images[currentIndex].id}.description`)}
              </p>
            </div>
          </motion.div>
        </AnimatePresence>
      </div>

      <Button
        variant="ghost"
        size="icon"
        className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/70 dark:bg-black/50 rounded-full text-black dark:text-white hover:bg-white hover:dark:bg-black transition-colors z-10 focus:outline-none focus:ring-2 focus:ring-primary"
        onClick={handlePrevious}
        aria-label={t("slider.previous")}
      >
        <ChevronLeft className="h-5 w-5" />
      </Button>

      <Button
        variant="ghost"
        size="icon"
        className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/70 dark:bg-black/50 rounded-full text-black dark:text-white hover:bg-white hover:dark:bg-black transition-colors z-10 focus:outline-none focus:ring-2 focus:ring-primary"
        onClick={handleNext}
        aria-label={t("slider.next")}
      >
        <ChevronRight className="h-5 w-5" />
      </Button>

      <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2 z-10">
        {images.map((_, index) => (
          <Button
            key={index}
            variant="ghost"
            size="icon"
            className={`w-3 h-3 p-0 rounded-full ${
              index === currentIndex ? "bg-white" : "bg-white/50 hover:bg-white"
            } transition-colors focus:outline-none focus:ring-2 focus:ring-primary`}
            onClick={() => handleDotClick(index)}
            aria-label={t("slider.goToSlide", { index: index + 1 })}
          />
        ))}
      </div>
    </div>
  );
};

export default ImageSlider;
