import { useState } from "react";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";

const ContactForm = () => {
  const { t } = useTranslation();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const contactFormSchema = z.object({
    name: z.string().min(2, { message: t('contact.form.nameError') }),
    email: z.string().email({ message: t('contact.form.emailError') }),
    subject: z.string().min(2, { message: t('contact.form.subjectError') }),
    message: z.string().min(10, { message: t('contact.form.messageError') })
  });

  type ContactFormValues = z.infer<typeof contactFormSchema>;

  const form = useForm<ContactFormValues>({
    resolver: zodResolver(contactFormSchema),
    defaultValues: {
      name: "",
      email: "",
      subject: "",
      message: ""
    }
  });

  const onSubmit = (data: ContactFormValues) => {
    setIsSubmitting(true);
    
    // In a real application, this would send data to a server
    setTimeout(() => {
      setIsSubmitting(false);
      toast({
        title: t('contact.form.successTitle'),
        description: t('contact.form.successMessage'),
      });
      form.reset();
    }, 1000);
  };

  return (
    <section id="contact" className="py-16 bg-gray-50 dark:bg-gray-900">
      <div className="container mx-auto px-4">
        <div className="max-w-2xl mx-auto">
          <h2 className="font-heading font-bold text-2xl md:text-3xl mb-4 text-center">{t('contact.title')}</h2>
          <div className="h-1 w-20 bg-accent mx-auto mb-6"></div>
          <p className="mb-8 text-center text-gray-600 dark:text-gray-300">
            {t('contact.description')}
          </p>
          
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{t('contact.form.name')}</FormLabel>
                      <FormControl>
                        <Input placeholder={t('contact.form.namePlaceholder')} {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{t('contact.form.email')}</FormLabel>
                      <FormControl>
                        <Input placeholder={t('contact.form.emailPlaceholder')} {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <FormField
                control={form.control}
                name="subject"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{t('contact.form.subject')}</FormLabel>
                    <FormControl>
                      <Input placeholder={t('contact.form.subjectPlaceholder')} {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="message"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{t('contact.form.message')}</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder={t('contact.form.messagePlaceholder')} 
                        rows={5} 
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <div className="flex justify-center">
                <Button type="submit" disabled={isSubmitting} className="px-6 py-3">
                  {isSubmitting ? t('contact.form.sending') : t('contact.form.send')}
                </Button>
              </div>
            </form>
          </Form>
        </div>
      </div>
    </section>
  );
};

export default ContactForm;


------------------------------

import { useTranslation } from "react-i18next";
import { ArrowRight } from "lucide-react";
import { Link } from "wouter";
import React, { forwardRef, useRef } from "react";

interface FeaturedDestinationProps {}

const FeaturedDestination = forwardRef<HTMLElement, FeaturedDestinationProps>(
  (props, ref) => {
    const { t } = useTranslation();
    const parisSectionRef = useRef(null);

    return (
      <section id="paris" ref={ref} className="py-16 container mx-auto px-4">
        <div className="flex flex-col md:flex-row gap-8 items-center">
          <div className="md:w-1/2">
            <h2 className="font-heading font-bold text-2xl md:text-3xl mb-4">
              {t("featured.title")}
            </h2>
            <div className="h-1 w-20 bg-accent mb-6"></div>
            <p className="mb-4 text-gray-600 dark:text-gray-300">
              {t("featured.description1")}
            </p>
            <p className="mb-6 text-gray-600 dark:text-gray-300">
              {t("featured.description2")}
            </p>
            <Link
              href="/#paris"
              className="inline-flex items-center text-foreground font-medium hover:underline"
            >
              {t("featured.exploreLink")}{" "}
              <ArrowRight className="ml-2 h-4 w-4" />
            </Link>
          </div>
          <div className="md:w-1/2">
            <div className="grid grid-cols-2 gap-4">
              <img
                src="../../assets/niemcy-francja/1.avif"
                alt={t("featured.image1Alt")}
                className="rounded-lg shadow-md aspect-[3/4] object-cover w-full h-full"
              />
              <img
                src="../../assets/niemcy-francja/2.avif"
                alt={t("featured.image2Alt")}
                className="rounded-lg shadow-md aspect-[3/4] object-cover w-full h-full"
              />
              <img
                src="../../assets/niemcy-francja/3.avif"
                alt={t("featured.image3Alt")}
                className="rounded-lg shadow-md aspect-[3/4] object-cover w-full h-full"
              />
              <img
                src="../../assets/niemcy-francja/4.avif"
                alt={t("featured.image4Alt")}
                className="rounded-lg shadow-md aspect-[3/4] object-cover w-full h-full"
              />
            </div>
          </div>
        </div>
      </section>
    );
  }
);

FeaturedDestination.displayName = "FeaturedDestination";
export default FeaturedDestination;


-----------------------------

import React, { useState, forwardRef } from "react"; // Usunięto useRef, jeśli nie jest już potrzebny
import { useTranslation } from "react-i18next";
import { ArrowRight } from "lucide-react";
import { Button } from "@/components/ui/button";
import PhotoLightbox from "./PhotoLightbox";
import { Photo } from "@/data/photos";

interface FeaturedDestinationProps {}

const FeaturedDestination = forwardRef<HTMLElement, FeaturedDestinationProps>(
  (props, ref) => {
    const { t } = useTranslation();
    const [isLightboxOpen, setIsLightboxOpen] = useState(false);
    const [currentImageIndex, setCurrentImageIndex] = useState(0);

    const parisImages: Photo[] = [
      {
        id: "paris-1",
        src: "../../assets/niemcy-francja/24.jpg",
      },
      { id: "paris-2", src: "../../assets/niemcy-francja/25.jpg" },
      { id: "paris-3", src: "../../assets/niemcy-francja/27.jpg" },
      { id: "paris-4", src: "../../assets/niemcy-francja/32.jpg" },
    ];

    const openLightbox = (index: number) => {
      setCurrentImageIndex(index);
      setIsLightboxOpen(true);
    };

    const closeLightbox = () => {
      setIsLightboxOpen(false);
    };

    const goToNext = () => {
      setCurrentImageIndex((prevIndex) => (prevIndex + 1) % parisImages.length);
    };

    const goToPrevious = () => {
      setCurrentImageIndex(
        (prevIndex) => (prevIndex - 1 + parisImages.length) % parisImages.length
      );
    };

    return (
      <>
        <section id="paris" ref={ref} className="py-16 container mx-auto px-4">
          <div className="flex flex-col md:flex-row gap-8 items-center">
            <div className="md:w-1/2">
              <h2 className="font-heading font-bold text-2xl md:text-3xl mb-4">
                {t("featured.title")}
              </h2>
              <div className="h-1 w-20 bg-accent mb-6"></div>
              <p className="mb-4 text-gray-600 dark:text-gray-300">
                {t("featured.description1")}
              </p>
              <p className="mb-6 text-gray-600 dark:text-gray-300">
                {t("featured.description2")}
              </p>

              <Button
                onClick={() => openLightbox(0)} // Otwórz na indeksie 0
                className="inline-flex items-center font-medium"
                variant="link"
              >
                {t("featured.exploreLink")}
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </div>
            <div className="md:w-1/2">
              <div className="grid grid-cols-2 gap-4">
                {parisImages.map((image, index) => (
                  <img
                    key={image.id}
                    src={image.src}
                    alt={t(
                      `photos.${image.id}.alt`,
                      `Paris Image ${index + 1}`
                    )} // Fallback
                    className="rounded-lg shadow-md aspect-[3/4] object-cover w-full h-full cursor-pointer hover:opacity-80 transition-opacity"
                    onClick={() => openLightbox(index)}
                  />
                ))}
              </div>
            </div>
          </div>
        </section>

        <PhotoLightbox
          isOpen={isLightboxOpen}
          photos={parisImages}
          currentIndex={currentImageIndex}
          onClose={closeLightbox}
          onNext={goToNext}
          onPrevious={goToPrevious}
        />
      </>
    );
  }
);

FeaturedDestination.displayName = "FeaturedDestination";
export default FeaturedDestination;


---------------------------

"scripts": {
    "dev": "cross-env NODE_ENV=development tsx server/index.ts",
    "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
    "start": "NODE_ENV=production node dist/index.js",
    "check": "tsc",
    "db:push": "drizzle-kit push"
  },

----------------------

